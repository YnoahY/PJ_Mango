/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.64
 * Generated at: 2022-10-24 01:52:07 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.user.page;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class sendSms_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(12);
    _jspx_dependants.put("jar:file:/C:/Mango/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/Mango/WEB-INF/lib/egovframework.rte.ptl.mvc-3.8.0.jar!/META-INF/taglib.tld", Long.valueOf(1539665194000L));
    _jspx_dependants.put("/WEB-INF/views/taglib.jsp", Long.valueOf(1659599458555L));
    _jspx_dependants.put("/WEB-INF/lib/egovframework.rte.ptl.mvc-3.8.0.jar", Long.valueOf(1663548654023L));
    _jspx_dependants.put("jar:file:/C:/Mango/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/Mango/WEB-INF/lib/spring-webmvc-4.3.16.RELEASE.jar!/META-INF/spring-form.tld", Long.valueOf(1523252374000L));
    _jspx_dependants.put("jar:file:/C:/Mango/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/Mango/WEB-INF/lib/jstl-1.2.jar!/META-INF/fmt.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("jar:file:/C:/Mango/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/Mango/WEB-INF/lib/spring-webmvc-4.3.16.RELEASE.jar!/META-INF/spring.tld", Long.valueOf(1523252374000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1654653023355L));
    _jspx_dependants.put("jar:file:/C:/Mango/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/Mango/WEB-INF/lib/spring-security-taglibs-4.2.5.RELEASE.jar!/META-INF/security.tld", Long.valueOf(1522394476000L));
    _jspx_dependants.put("/WEB-INF/lib/spring-security-taglibs-4.2.5.RELEASE.jar", Long.valueOf(1663548649495L));
    _jspx_dependants.put("jar:file:/C:/Mango/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/Mango/WEB-INF/lib/jstl-1.2.jar!/META-INF/fn.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("jar:file:/C:/Mango/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/Mango/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/lib/spring-webmvc-4.3.16.RELEASE.jar", Long.valueOf(1663548648291L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>login</title>\r\n");
      out.write("\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("</style>\r\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.4.1.min.js\"></script>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<h3>sms인증페이지</h3>\r\n");
      out.write("	<div id=\"contents\">\r\n");
      out.write("		<form action=\"/page/sendSms/insert.do\" method=\"post\">\r\n");
      out.write("			받는사람 : <input type=\"text\" id=\"to\" name=\"to\" />\r\n");
      out.write("			<!-- 인증번호 받을사람 휴대폰 번호 -->\r\n");
      out.write("			<input type=\"button\" id=\"send\" value=\"전송\" /><br>\r\n");
      out.write("			<!-- 문자보내는 전송버튼 -->\r\n");
      out.write("			인증번호 : <input type=\"text\" id=\"userNum\">\r\n");
      out.write("			<!-- 인증번호 입력창 -->\r\n");
      out.write("			<input type=\"button\" id=\"enterBtn\" value=\"확인\">\r\n");
      out.write("			<!-- 인증번호와 내가 입력창에 입력한 인증번호 비교하는 창 -->\r\n");
      out.write("			<input type=\"hidden\" name=\"text\" id=\"text\">\r\n");
      out.write("			<!-- 인증번호를 히든으로 저장해서 보낸다 -->\r\n");
      out.write("\r\n");
      out.write("		</form>\r\n");
      out.write("	</div>\r\n");
      out.write("\r\n");
      out.write("	<script type=\"text/javascript\">\r\n");
      out.write("   function setParentText(){\r\n");
      out.write("      opener.document.getElementById(\"phone\").value = document.getElementById(\"to\").value\r\n");
      out.write("      \r\n");
      out.write("      window.close()\r\n");
      out.write("   }\r\n");
      out.write("	</script>\r\n");
      out.write("\r\n");
      out.write("	<!-- 휴대폰 번호 유효성 검사 -->\r\n");
      out.write("	<script>\r\n");
      out.write("function Phonecheck() {\r\n");
      out.write("   var objPhoneNum = document.getElementById(\"phone\");\r\n");
      out.write("   \r\n");
      out.write("   if(objPhoneNum.value=='') {\r\n");
      out.write("      alert(\"전화번호를 입력해주세요.\");\r\n");
      out.write("      objPhoneNum.focus(); //전화번호 input에 커서가 깜빡임\r\n");
      out.write("      return false;\r\n");
      out.write("   }\r\n");
      out.write("   \r\n");
      out.write("   var RegPhone = /^[0-9]{10,11}$/;\r\n");
      out.write("  if(!RegPhone.test(objPhoneNum.value)) {\r\n");
      out.write("      alert(\"유효하지 않은 전화번호입니다.\");\r\n");
      out.write("      objPhoneNum.focus(); //전화번호 input에 커서가 깜빡임\r\n");
      out.write("      return false;\r\n");
      out.write("   }\r\n");
      out.write("    \r\n");
      out.write("}\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("	<script>\r\n");
      out.write("  var count = 0; /* 문자 중복을 막기 위한 인증번호 */\r\n");
      out.write("   \r\n");
      out.write(" $(document).ready(function() {\r\n");
      out.write("    \r\n");
      out.write("    $(\"#send\").click(function() {\r\n");
      out.write("       \r\n");
      out.write("       var number = Math.floor(Math.random() * 100000) + 100000;\r\n");
      out.write("          if(number>100000){\r\n");
      out.write("             number = number - 10000;\r\n");
      out.write("          }\r\n");
      out.write("          $(\"#text\").val(number);      \r\n");
      out.write("       \r\n");
      out.write("       var to = $(\"#to\").val();\r\n");
      out.write("       \r\n");
      out.write("       if(to == \"\" || to == null){\r\n");
      out.write("          alert(\"빈칸이나 공백을 채워주세요\");\r\n");
      out.write("       }\r\n");
      out.write("       \r\n");
      out.write("       else {\r\n");
      out.write("       var con_test = confirm(\"해당번호로 인증문자를 발송하시겠습니까?\");  \r\n");
      out.write("          \r\n");
      out.write("          if(con_test == true){\r\n");
      out.write("             // 인증번호 얻기위한 통신\r\n");
      out.write("             $.ajax({\r\n");
      out.write("                url : \"/page/sendSms/insert.do\",\r\n");
      out.write("                type : \"post\",\r\n");
      out.write("                data:{\r\n");
      out.write("                 to : $(\"#to\").val(),\r\n");
      out.write("                 text : $(\"#text\").val()\r\n");
      out.write("                },\r\n");
      out.write("                success : function(res){ // 통신 성공 시\r\n");
      out.write("                   alert(\"인증번호를 발송했습니다\");\r\n");
      out.write("                   console.log(res)\r\n");
      out.write("                }\r\n");
      out.write("             })\r\n");
      out.write("             \r\n");
      out.write("          \r\n");
      out.write("          }\r\n");
      out.write("             else if(con_test == false){\r\n");
      out.write("                \r\n");
      out.write("             }\r\n");
      out.write("         }   \r\n");
      out.write("    })\r\n");
      out.write("    \r\n");
      out.write("    $(\"#enterBtn\").click(function() {   /* 내가 작성한 번호와 인증번호를 비교한다 */\r\n");
      out.write("      \r\n");
      out.write("       var userNum = $(\"#userNum\").val();\r\n");
      out.write("       \r\n");
      out.write("       var sysNum = $(\"#text\").val();         \r\n");
      out.write("       \r\n");
      out.write("       if(userNum == null || userNum == \"\"){\r\n");
      out.write("          alert(\"휴대폰으로 발송된 인증번호를 입력해주세요\");\r\n");
      out.write("       }     \r\n");
      out.write("       else{     \r\n");
      out.write("          if(userNum.trim() == sysNum.trim()){\r\n");
      out.write("              alert(\"정상적으로 인증되었습니다.\");\r\n");
      out.write("              setParentText()     \r\n");
      out.write("              \r\n");
      out.write("              return \r\n");
      out.write("           }\r\n");
      out.write("           else {\r\n");
      out.write("              alert(\"인증번호가 일치하지 않습니다.\");\r\n");
      out.write("           }          \r\n");
      out.write("       }\r\n");
      out.write("    });\r\n");
      out.write("  });\r\n");
      out.write("  </script>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
